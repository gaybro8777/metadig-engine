<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>edu.ucsb.nceas</groupId>
	<artifactId>metadig-engine</artifactId>
	<version>2.0.2</version>
	<packaging>jar</packaging>

	<name>metadig-engine</name>
	<description>MetaDig library for running metadata quality tests</description>
	<url>https://github.com/NCEAS/metadig-engine</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <d1_libclient_java.version>2.3.1</d1_libclient_java.version>
        <renjin.version>0.8.2087</renjin.version>
        <jython.version>2.7.1b2</jython.version>
        <gson.version>2.6.2</gson.version>
        <moxy.version>2.6.3</moxy.version>
		<d1_cn_index_processor_version>2.4.0-SNAPSHOT</d1_cn_index_processor_version>
		<d1_cn_index_common_version>2.4.0-SNAPSHOT</d1_cn_index_common_version>
		<!-- Have to use a very old version of Spring in order to stay compatible with
		    d1_cn_index_processor -->
		<!-- <spring.version>4.3.8.RELEASE</spring.version> -->
		<spring.version>3.1.4.RELEASE</spring.version>
        <!-- <docker.registry>docker.io</docker.registry> -->
        <docker.repo>metadig</docker.repo>
        <docker.tag>2.0.2-dev</docker.tag>
		<!-- <modules.test.includes>**/*Test.java</modules.test.includes> -->
		<modules.test.excludes>**/LTERSuiteTest.java</modules.test.excludes>
	</properties>

	<scm>
		<url>https://github.com/NCEAS/metadig-engine.git</url>
	</scm>
	<organization>
		<name>National Center for Ecological Analysis and Synthesis, UC Santa Barbara</name>
		<url>http://nceas.ucsb.edu</url>
	</organization>
	<dependencies>
		<dependency>
			<groupId>org.renjin</groupId>
			<artifactId>renjin-script-engine</artifactId>
			<version>${renjin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.python</groupId>
			<artifactId>jython-standalone</artifactId>
			<version>${jython.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<type>jar</type>
			<scope>test</scope>
		</dependency>
		<!-- http://mvnrepository.com/artifact/com.google.code.gson/gson -->
		<dependency>
		    <groupId>com.google.code.gson</groupId>
		    <artifactId>gson</artifactId>
		    <version>${gson.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/net.minidev/json-smart -->
		<dependency>
			<groupId>net.minidev</groupId>
			<artifactId>json-smart</artifactId>
			<version>2.3</version>
		</dependency>
		<!-- http://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
			<version>1.5</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-configuration2</artifactId>
			<version>2.7</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.3</version>
		</dependency>
		<!-- http://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.moxy -->
		<dependency>
		    <groupId>org.eclipse.persistence</groupId>
		    <artifactId>org.eclipse.persistence.moxy</artifactId>
		    <version>${moxy.version}</version>
		</dependency>
		<!-- D1 libclient -->
		<dependency>
			<groupId>org.dataone</groupId>
			<artifactId>d1_libclient_java</artifactId>
			<version>${d1_libclient_java.version}</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.25</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client -->
		<dependency>
			<groupId>com.rabbitmq</groupId>
			<artifactId>amqp-client</artifactId>
			<version>5.3.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/joda-time/joda-time -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.9.9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-solrj</artifactId>
			<version>7.3.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-core</artifactId>
			<version>7.3.0</version>
		</dependency>
		<!-- httpclient 4.5.5 is needed by solrj 7.2.1 but the solrj pom only loads
		     httpclient 4.5.3, so this dependency is included here. If this version is not included,
		     then trying to create an HttpSolrClient causes an unchecked Exception. -->
		<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.5</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.dataone</groupId>
			<artifactId>d1_cn_index_processor</artifactId>
			<version>${d1_cn_index_processor_version}</version>
			<type>jar</type>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.hp.hpl.jena</groupId>
					<artifactId>jena</artifactId>
				</exclusion>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.solr</groupId>
					<artifactId>solr-solrj</artifactId>
				</exclusion>
				<exclusion>
					<groupId>postgresql</groupId>
					<artifactId>postgresql</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-beanutils</groupId>
					<artifactId>commons-beanutils</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.rabbitmq</groupId>
					<artifactId>amqp-client</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.json/json -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20180130</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.2.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.4.10</version>
		</dependency>
	</dependencies>
	<repositories>
        <!-- <repository>
            <id>docker.io</id>
            <name>docker hub</name>
            <url>https://hub.docker.com</url>
        </repository>
	-->
		<repository>
			<id>bedatadriven</id>
			<name>bedatadriven public repo</name>
			<url>https://nexus.bedatadriven.com/content/groups/public/</url>
		</repository>
		<repository>
			<id>dataone.org</id>
			<name>DataONE Maven repo</name>
			<url>http://maven.dataone.org/</url>
		</repository>
	</repositories>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
            <!--
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>jaxb2-maven-plugin</artifactId>
			    <version>2.2</version>
			    <executions>
			        <execution>
			            <goals>
			                <goal>schemagen</goal>
			            </goals>
			            <phase>generate-resources</phase>
			            <configuration>
			            	<createJavaDocAnnotations>false</createJavaDocAnnotations>
			                <sources>
			                    <source>src/main/java/edu/ucsb/nceas/mdqengine/model</source>
			                </sources>
			                <outputDirectory>${basedir}/src/main/resources/schemas</outputDirectory>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>
        -->
			<!--
			The following plugin builds a JAR file with dependencies that automatically runs the main() method of the
			MDQEngine. This allows me to run a Suite against a document like:

		   		java -jar target/metadig-engine-1.0.0-SNAPSHOT-jar-with-dependencies.jar $SUITE $DOC

			Taken pretty much verbatim from http://maven.apache.org/plugins/maven-assembly-plugin/usage.html.
			-->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<mainClass>edu.ucsb.nceas.mdqengine.MDQEngine</mainClass>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Include all dependencies using a 'shade' jar so that the
				 MetaDIG Controller and Worker can be run directly from this
				 jar file. This allows deployment either in the MetaDIG web
				 app (which runs the Controller, or as a command line task
				 (which is how the Worker is run). -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<filters>
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
										<exclude>META-INF/</exclude>
									</excludes>
								</filter>
							</filters>
                            <!-- Exclude javax.servlet.http.HttpServlet" from the jar so that
                            we can determine when we are running in a servlet enviromnet. This class will be
                            provided by the servlet container distribution when running as a sevlet
                            -->
                            <artifactSet>
                                <excludes>
                                    <exclude>javax.servlet:*</exclude>
                                </excludes>
                            </artifactSet>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<manifestEntries>
										<Main-Class>edu.ucsb.nceas.mdqengine.Controller</Main-Class>
										<Build-Number>1</Build-Number>
									</manifestEntries>
									<manifestEntries>
										<Main-Class>edu.ucsb.nceas.mdqengine.Worker</Main-Class>
										<Build-Number>12</Build-Number>
									</manifestEntries>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>copy-jar-file</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target name="copy files">
								<copy file="${project.build.directory}/metadig-engine-${project.version}.jar" tofile="${project.basedir}/Kubernetes/metadig-worker/metadig-engine.jar" />
                                <copy file="${project.build.directory}/metadig-engine-${project.version}.jar" tofile="${project.basedir}/Kubernetes/metadig-scheduler/metadig-engine.jar" />
                                <copy file="${project.build.directory}/classes/solr/application-context-mdq.xml" tofile="${project.basedir}/Kubernetes/metadig-worker/solr/application-context-mdq.xml" />
                                <copy file="${project.build.directory}/classes/solr/application-context-systemmeta-200.xml" tofile="${project.basedir}/Kubernetes/metadig-worker/solr/application-context-systemmeta-200.xml" />
								<copy file="${project.build.directory}/classes/solr/metadig-index-processor-context.xml" tofile="${project.basedir}/Kubernetes/metadig-worker/solr/metadig-index-processor-context.xml" />
								<copy file="${project.build.directory}/classes/configuration/metadig.properties" tofile="${project.basedir}/Kubernetes/metadig-worker/metadig.properties" />
								<copy file="${project.build.directory}/classes/configuration/metadig.properties" tofile="${project.basedir}/Kubernetes/metadig-scheduler/metadig.properties" />
								<copy file="${project.build.directory}/classes/configuration/taskList.csv" tofile="${project.basedir}/Kubernetes/metadig-scheduler/taskList.csv" />
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
            <!-- docker.io username and password is in the ~/.m2/settings.xml file -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.25.2</version>
				<configuration>
					<images>
                        <image>
                            <name>${docker.repo}/metadig-worker:${docker.tag}</name>
                            <build>
                                <dockerFileDir>${project.basedir}/Kubernetes/metadig-worker</dockerFileDir>
                            </build>
                        </image>
						<image>
							<name>${docker.repo}/metadig-scheduler:${docker.tag}</name>
							<build>
								<dockerFileDir>${project.basedir}/Kubernetes/metadig-scheduler</dockerFileDir>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<excludes>
						<exclude>${modules.test.excludes}</exclude>
					</excludes>
					<!--
					<includes>
						<include>${modules.test.includes}</include>
					</includes>
					-->
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
